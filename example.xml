This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: ui, prisma, utils, tsconfig.tsbuildinfo, build, api
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
eslint-config/
  types/
    eslint-plugin-only-warn.d.ts
  .gitignore
  base.js
  library.js
  nest.js
  next.js
  package.json
  react-internal.js
  README.md
  tsconfig.json
  types.d.ts
jest-presets/
  node/
    jest-preset.ts
  .gitignore
  .prettierrc.js
  base.ts
  infrastructure.ts
  nest.ts
  next.ts
  node.ts
  package.json
  README.md
logger/
  dist/
    __tests__/
      log.test.d.ts
      log.test.d.ts.map
      log.test.js
    index.d.ts
    index.d.ts.map
    index.js
  src/
    __tests__/
      log.test.ts
    index.ts
  .eslintrc.js
  .gitignore
  .prettierrc.js
  package.json
  README.md
  tsconfig.json
prettier-config/
  .gitignore
  package.json
  prettier-base.js
  README.md
tailwind-config/
  .gitignore
  .prettierrc.js
  package.json
  postcss.config.js
  README.md
  tailwind.config.mts
  tsconfig.json
typescript-config/
  .gitignore
  .prettierrc.js
  base.json
  nestjs.json
  nextjs.json
  package.json
  react-library.json
  README.md
repomix.config.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="eslint-config/types/eslint-plugin-only-warn.d.ts">
import type { ESLint } from "eslint";
</file>

<file path="eslint-config/.gitignore">
# Coverage directories
coverage/
.nyc_output/
</file>

<file path="eslint-config/base.js">
// @ts-check
⋮----
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
⋮----
const compat = new FlatCompat({
⋮----
/** @type {import('eslint').Linter.FlatConfig} */
⋮----
// unicorn: unicornPlugin.default,
⋮----
const recommendedConfigs = compat.config({
⋮----
// "plugin:sonarjs/recommended",
// "plugin:security/recommended",
⋮----
// Basic universally beneficial rules
⋮----
// quotes rule is handled by prettier - don't conflict
⋮----
// Unicorn plugin customizations
⋮----
// TypeScript specific rules
⋮----
// TypeScript naming conventions
⋮----
// Import ordering
⋮----
// /** @type {import('eslint').Linter.FlatConfig} */
// const prettierConfig = {
//   rules: {
//     // Ensure Prettier formatting rules match our style preferences
//     "prettier/prettier": [
//       "error",
//       {
//         singleQuote: true,
//         trailingComma: "es5",
//         tabWidth: 2,
//         semi: true,
//         printWidth: 100,
//       },
//     ],
//   },
// };
⋮----
// prettierConfig,
</file>

<file path="eslint-config/library.js">
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
⋮----
const project = path.resolve(process.cwd(), "tsconfig.json");
⋮----
/** @type {import("eslint").Linter.FlatConfig[]} */
⋮----
...compat.extends("./base.js"),
</file>

<file path="eslint-config/nest.js">
// @ts-check
⋮----
/** @type {import('eslint').Linter.FlatConfig[]} */
</file>

<file path="eslint-config/next.js">
// @ts-check
⋮----
/** @type {import('eslint').Linter.FlatConfig[]} */
⋮----
// TypeScript files
</file>

<file path="eslint-config/package.json">
{
  "name": "@repo/eslint-config",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "exports": {
    "./next": "./next.js",
    "./base": "./base.js",
    "./library": "./library.js",
    "./nest": "./nest.js",
    "./react-internal": "./react-internal.js"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.27.0",
    "@typescript-eslint/eslint-plugin": "^8.33.0",
    "@typescript-eslint/parser": "^8.33.0",
    "eslint": "^9.27.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-config-turbo": "^2.5.4",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-n": "^17.18.0",
    "eslint-plugin-only-warn": "^1.1.0",
    "eslint-plugin-prettier": "^5.4.1",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-regexp": "^2.7.0",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "eslint-plugin-turbo": "^2.5.4",
    "eslint-plugin-unicorn": "^59.0.1",
    "typescript": "5.8.3"
  },
  "dependencies": {
    "eslint-import-resolver-typescript": "^4.4.1"
  }
}
</file>

<file path="eslint-config/react-internal.js">
/** @type {import('eslint').Linter.FlatConfig[]} */
</file>

<file path="eslint-config/README.md">
# ESLint Configuration

## Table of Contents

- [Overview](#overview)
- [Available Configurations](#available-configurations)
- [Usage Guidelines](#usage-guidelines)
- [Related Documentation](#related-documentation)

## Overview

Collection of internal eslint configurations for the Radian Virtual Assistant project.

## Available Configurations

- `next.js` - ESLint configuration for Next.js applications
- `node.js` - ESLint configuration for Node.js applications
- `react.js` - ESLint configuration for React libraries
- `nest.js` - ESLint configuration for NestJS applications

## Usage Guidelines

To use these configurations in your project, reference them in your local `eslint.config.js`:

```js
const { nextConfig } = require("@repo/eslint-config/next");

module.exports = [
  ...nextConfig,
  // Project-specific overrides
  {
    rules: {
      // Custom rules
    },
  },
];
```

## Related Documentation

- [Main Project Documentation](../../README.md)
- [TypeScript Configuration](../typescript-config/README.md)
- [API Service](../../apps/api/README.md)
- [Web Application](../../apps/web/README.md)
- [File Processor Service](../../apps/file-processor-service/README.md)
- [ESLint Official Documentation](https://eslint.org/docs/latest/)
</file>

<file path="eslint-config/tsconfig.json">
{
  "extends": "@repo/typescript-config/base",
  "compilerOptions": {
    "module": "NodeNext",
    "moduleResolution": "NodeNext"
  },
  "include": ["./*"],
  "exclude": ["node_modules"]
}
</file>

<file path="eslint-config/types.d.ts">
import type { ESLint } from "eslint";
</file>

<file path="jest-presets/node/jest-preset.ts">
import type { Config } from 'jest';
</file>

<file path="jest-presets/.gitignore">
# Coverage directories
coverage/
.nyc_output/
</file>

<file path="jest-presets/.prettierrc.js">
/** @type {import("prettier").Config} */
</file>

<file path="jest-presets/base.ts">
import type { Config } from 'jest';
⋮----
coverageProvider: 'v8', // Using v8 which is the expected type in Jest Config
⋮----
// coverageThreshold: {
//   global: {
//     branches: 70,
//     functions: 70,
//     lines: 70,
//     statements: 70,
//   },
// },
</file>

<file path="jest-presets/infrastructure.ts">
import type { Config } from 'jest';
</file>

<file path="jest-presets/nest.ts">
import type { Config } from 'jest';
import { config as baseConfig } from './base';
</file>

<file path="jest-presets/next.ts">
import type { Config } from 'jest';
// unfortunately, need to disambiguate the `Config` namespace @jest/types uses (via next/jest) and the `Config` type we want for typing our config here
import type { Config as ConfigNamespace } from '@jest/types';
import nextJest from 'next/jest';
import { config as baseConfig } from './base';
</file>

<file path="jest-presets/node.ts">
import { config } from './node/jest-preset';
</file>

<file path="jest-presets/package.json">
{
  "name": "@repo/jest-presets",
  "version": "0.0.0",
  "private": true,
  "license": "MIT",
  "files": [
    "node/jest-preset.ts"
  ],
  "devDependencies": {
    "@jest/types": "^29.6.3",
    "jest": "^29.7.0",
    "next": "^15.1.7",
    "ts-jest": "^29.2.5"
  }
}
</file>

<file path="jest-presets/README.md">
# Jest Presets

## Table of Contents

- [Overview](#overview)
- [Installation](#installation)
- [Available Presets](#available-presets)
  - [Next.js Preset](#nextjs-preset)
  - [NestJS Preset](#nestjs-preset)
  - [Base Preset](#base-preset)
- [Usage](#usage)
- [Customization](#customization)
- [Related Documentation](#related-documentation)

## Overview

This package contains shared Jest testing configurations for the Radian Virtual Assistant project. It provides standardized testing presets for different application types (Next.js, NestJS) and ensures consistent test behavior across all packages in the monorepo.

## Installation

The package is installed as a workspace dependency:

```bash
pnpm add @repo/jest-presets --filter <package-name> -D
```

## Available Presets

### Next.js Preset

Specialized preset for testing Next.js applications with proper handling of:

- React components
- Next.js API routes
- Server components and client components
- CSS modules and other assets

### NestJS Preset

Specialized preset for testing NestJS applications with proper handling of:

- NestJS modules and dependency injection
- GraphQL resolvers
- REST controllers
- Database connections and repositories

### Base Preset

Generic preset for testing utility packages and libraries with:

- TypeScript support
- Common mocks and transformers
- Code coverage configuration

## Usage

### In Next.js Applications

Create a `jest.config.ts` file:

```typescript
import type { Config } from 'jest';
import { nextJestPreset } from '@repo/jest-presets';

const config: Config = {
  ...nextJestPreset,
  // Add app-specific configuration
  displayName: 'web',
  rootDir: './',
  setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
  // Collect coverage from specific directories
  collectCoverageFrom: [
    'app/**/*.{js,jsx,ts,tsx}',
    'components/**/*.{js,jsx,ts,tsx}',
    'lib/**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
  ],
};

export default config;
```

### In NestJS Applications

Create a `jest.config.ts` file:

```typescript
import type { Config } from 'jest';
import { nestJestPreset } from '@repo/jest-presets';

const config: Config = {
  ...nestJestPreset,
  // Add app-specific configuration
  displayName: 'api',
  rootDir: './',
  // Collect coverage from specific directories
  collectCoverageFrom: [
    'src/**/*.ts',
    '!src/**/*.spec.ts',
    '!src/**/*.module.ts',
    '!src/main.ts',
    '!**/node_modules/**',
  ],
  // Set up test database connections
  setupFilesAfterEnv: ['<rootDir>/test/setup.ts'],
};

export default config;
```

### In Library Packages

Create a `jest.config.ts` file:

```typescript
import type { Config } from 'jest';
import { baseJestPreset } from '@repo/jest-presets';

const config: Config = {
  ...baseJestPreset,
  // Add package-specific configuration
  displayName: 'utils',
  rootDir: './',
  // Collect coverage from specific directories
  collectCoverageFrom: ['src/**/*.ts', '!src/**/*.spec.ts'],
};

export default config;
```

## Customization

Each preset provides sensible defaults that can be overridden. Common customizations include:

### Test Environment

```typescript
import type { Config } from 'jest';
import { baseJestPreset } from '@repo/jest-presets';

const config: Config = {
  ...baseJestPreset,
  // Override test environment
  testEnvironment: 'node', // or 'jsdom' for browser-based tests
};

export default config;
```

### Coverage Thresholds

```typescript
import type { Config } from 'jest';
import { nestJestPreset } from '@repo/jest-presets';

const config: Config = {
  ...nestJestPreset,
  // Set coverage thresholds
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
};

export default config;
```

### Test Match Patterns

```typescript
import type { Config } from 'jest';
import { nextJestPreset } from '@repo/jest-presets';

const config: Config = {
  ...nextJestPreset,
  // Override test file patterns
  testMatch: [
    '**/__tests__/**/*.spec.[jt]s?(x)',
    '**/?(*.)+(spec|test).[jt]s?(x)',
  ],
};

export default config;
```

## Related Documentation

- [Main Project Documentation](../../README.md)
- [ESLint Configuration](../eslint-config/README.md)
- [TypeScript Configuration](../typescript-config/README.md)
- [Web Application](../../apps/web/README.md)
- [API Service](../../apps/api/README.md)
- [Testing Guidelines](../../docs/testing/code-coverage/code-coverage.md)
- [External: Jest Documentation](https://jestjs.io/docs/getting-started)
</file>

<file path="logger/dist/__tests__/log.test.d.ts">
//# sourceMappingURL=log.test.d.ts.map
</file>

<file path="logger/dist/__tests__/log.test.d.ts.map">
{"version":3,"file":"log.test.d.ts","sourceRoot":"","sources":["../../src/__tests__/log.test.ts"],"names":[],"mappings":""}
</file>

<file path="logger/dist/__tests__/log.test.js">
Object.defineProperty(exports, "__esModule", { value: true });
⋮----
globals_1.jest.spyOn(global.console, 'log');
⋮----
(0, globals_1.expect)(console.log).toHaveBeenCalled();
</file>

<file path="logger/dist/index.d.ts">
//# sourceMappingURL=index.d.ts.map
</file>

<file path="logger/dist/index.d.ts.map">
{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,eAAO,MAAM,GAAG,QAAS,GAAG,SAE3B,CAAC"}
</file>

<file path="logger/dist/index.js">
Object.defineProperty(exports, "__esModule", { value: true });
⋮----
const log = (str) => {
console.log('logger: ' + str);
</file>

<file path="logger/src/__tests__/log.test.ts">
import { describe, it, expect, jest } from '@jest/globals';
import { log } from '..';
</file>

<file path="logger/src/index.ts">
export const log = (str: any) =>
</file>

<file path="logger/.eslintrc.js">
/** @type {import("eslint").Linter.Config} */
</file>

<file path="logger/.gitignore">
# Coverage directories
coverage/
.nyc_output/
</file>

<file path="logger/.prettierrc.js">
/** @type {import("prettier").Config} */
</file>

<file path="logger/package.json">
{
  "name": "@repo/logger",
  "version": "0.0.0",
  "private": true,
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/**"
  ],
  "scripts": {
    "build": "tsc",
    "clean": "rm -rf dist",
    "dev": "tsc -w",
    "lint": "eslint \"src/**/*.ts*\" --max-warnings 0",
    "test": "jest"
  },
  "jest": {
    "preset": "@repo/jest-presets/node"
  },
  "devDependencies": {
    "@jest/globals": "^29.7.0",
    "@repo/eslint-config": "workspace:*",
    "@repo/jest-presets": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@types/node": "^22.13.4",
    "eslint": "^9.20.1",
    "jest": "^29.7.0",
    "typescript": "5.7.3"
  }
}
</file>

<file path="logger/README.md">
# Logger Package

## Table of Contents

- [Overview](#overview)
- [Installation](#installation)
- [Basic Usage](#basic-usage)
- [Configuration](#configuration)
- [Advanced Features](#advanced-features)
- [Best Practices](#best-practices)
- [Related Documentation](#related-documentation)

## Overview

This package provides a unified logging solution for the Radian Virtual Assistant project. It wraps popular logging libraries like Winston and Pino to provide a consistent interface across all applications and services in the monorepo.

## Installation

The package is installed as a workspace dependency:

```bash
pnpm add @repo/logger --filter <package-name>
```

## Basic Usage

### Simple Logging

```typescript
import { logger } from '@repo/logger';

// Basic logging
logger.info('User logged in', { userId: '123' });
logger.warn('Rate limit approaching', {
  endpoint: '/api/documents',
  current: 80,
});
logger.error('Failed to process document', {
  documentId: 'doc-456',
  error: err.message,
});
```

### Contextual Logging

```typescript
import { createContextLogger } from '@repo/logger';

// Create a context-aware logger
const userLogger = createContextLogger('user-service', { userId: '123' });

userLogger.info('Profile updated'); // Automatically includes userId and service name
userLogger.error('Password reset failed', { reason: 'Token expired' });
```

### Request Logging (for NestJS)

```typescript
import { LoggerMiddleware } from '@repo/logger/nestjs';

// In your NestJS module
@Module({
  providers: [LoggerMiddleware],
  exports: [LoggerMiddleware],
})
export class LoggingModule {}
```

## Configuration

### Environment-Based Configuration

The logger automatically detects the environment and configures itself accordingly:

- **Development**: Colorized console output with detailed stack traces
- **Testing**: Minimal console output or silent mode
- **Production**: JSON formatted logs suitable for log aggregation services

### Custom Configuration

You can customize the logger behavior:

```typescript
import { configureLogger } from '@repo/logger';

configureLogger({
  level: 'debug',
  transports: ['console', 's3'],
  format: 'json',
  meta: {
    application: 'web-app',
    environment: 'staging',
  },
});
```

## Advanced Features

### Log Rotation

For file-based logging, automatic log rotation is supported:

```typescript
import { configureLogger } from '@repo/logger';

configureLogger({
  transports: [
    {
      type: 'file',
      filename: 'application-%DATE%.log',
      datePattern: 'YYYY-MM-DD',
      maxSize: '20m',
      maxFiles: '14d',
    },
  ],
});
```

### AWS CloudWatch Integration

Sending logs to AWS CloudWatch:

```typescript
import { configureLogger } from '@repo/logger';

configureLogger({
  transports: [
    {
      type: 'cloudwatch',
      logGroupName: '/radian-va/api',
      logStreamName: 'application',
      awsRegion: 'us-east-1',
    },
  ],
});
```

### Request Tracing

The logger supports distributed tracing:

```typescript
import { withRequestId } from '@repo/logger/tracing';

// In an Express middleware or NestJS interceptor
app.use((req, res, next) => {
  const requestId = req.headers['x-request-id'] || uuidv4();
  withRequestId(requestId, () => {
    // All log calls within this context will include the requestId
    next();
  });
});
```

## Best Practices

1. **Use Structured Logging**: Always include relevant metadata as an object in your log calls
2. **Choose Appropriate Log Levels**:
   - `error`: Application errors that require attention
   - `warn`: Potentially harmful situations that might lead to errors
   - `info`: General information about application flow
   - `debug`: Detailed debugging information
   - `trace`: Very detailed information (e.g., function entry/exit)
3. **Include Context**: Log relevant context like user IDs, request IDs, and business entities
4. **Sanitize Sensitive Data**: Never log passwords, tokens, or PII

## Related Documentation

- [Main Project Documentation](../../README.md)
- [API Service](../../apps/api/README.md)
- [Web Application](../../apps/web/README.md)
- [Utils Package](../utils/README.md)
- [TypeScript Configuration](../typescript-config/README.md)
</file>

<file path="logger/tsconfig.json">
{
  "extends": "@repo/typescript-config/base",
  "compilerOptions": {
    "lib": ["ES2015", "DOM"],
    "outDir": "./dist",
    "rootDir": "./src",
    "types": ["jest", "node"]
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}
</file>

<file path="prettier-config/.gitignore">
# Coverage directories
coverage/
.nyc_output/
</file>

<file path="prettier-config/package.json">
{
  "name": "@repo/prettier-config",
  "version": "0.0.0",
  "private": true,
  "exports": {
    "./prettier-base": "./prettier-base.js"
  },
  "files": [
    "prettier-base.js"
  ]
}
</file>

<file path="prettier-config/prettier-base.js">
/** @type {import("prettier").Config} */
</file>

<file path="prettier-config/README.md">
# Prettier Config

## Table of Contents

- [Overview](#overview)
- [Installation](#installation)
- [Usage](#usage)
- [Configuration Details](#configuration-details)
- [Customization](#customization)
- [Related Documentation](#related-documentation)

## Overview

This package contains the shared Prettier configuration for the Radian Virtual Assistant project. It defines consistent code formatting rules across all applications and packages in the monorepo.

## Installation

The package is installed as a workspace dependency:

```bash
pnpm add @repo/prettier-config --filter <package-name>
```

## Usage

### In package.json

The simplest way to use the shared config is to add it to your `package.json`:

```json
{
  "name": "your-package-name",
  "prettier": "@repo/prettier-config"
}
```

### With .prettierrc.js

For more flexibility, create a `.prettierrc.js` file:

```javascript
/** @type {import("prettier").Config} */
const config = {
  ...require("@repo/prettier-config"),
  // Add package-specific overrides here
};

module.exports = config;
```

### With Explicit Config File

For the most control, create a `prettier.config.js` file:

```javascript
/** @type {import("prettier").Config} */
const sharedConfig = require("@repo/prettier-config");

module.exports = {
  ...sharedConfig,
  // Package-specific overrides
  printWidth: 100,
};
```

## Configuration Details

The shared Prettier configuration includes:

```javascript
module.exports = {
  // Use single quotes instead of double quotes
  singleQuote: true,

  // Print semicolons at the ends of statements
  semi: true,

  // Use 2 spaces for indentation
  tabWidth: 2,

  // Don't use tabs for indentation
  useTabs: false,

  // Print trailing commas wherever possible in multi-line
  trailingComma: "all",

  // Print spaces between brackets in object literals
  bracketSpacing: true,

  // Put the `>` of a multi-line HTML element at the end of the last line
  bracketSameLine: false,

  // Include parentheses around a sole arrow function parameter
  arrowParens: "always",

  // Maximum line length
  printWidth: 80,

  // Maintain existing line endings
  endOfLine: "lf",

  // Format JSX files
  jsxSingleQuote: false,

  // Additional plugins for specialized formatting
  plugins: ["prettier-plugin-tailwindcss"],
};
```

## Customization

To override specific formatting rules in your application:

1. Create a local `.prettierrc.js` file in your package
2. Import the shared config
3. Override specific settings

Example for a package with longer line length:

```javascript
/** @type {import("prettier").Config} */
const config = {
  ...require("@repo/prettier-config"),
  // Allow longer lines in this specific package
  printWidth: 100,
  // Disable trailing commas for this package
  trailingComma: "es5",
};

module.exports = config;
```

## Related Documentation

- [Main Project Documentation](../../README.md)
- [ESLint Configuration](../eslint-config/README.md)
- [TypeScript Configuration](../typescript-config/README.md)
- [Web Application](../../apps/web/README.md)
- [API Service](../../apps/api/README.md)
- [External: Prettier Documentation](https://prettier.io/docs/en/)
</file>

<file path="tailwind-config/.gitignore">
# Coverage directories
coverage/
.nyc_output/
</file>

<file path="tailwind-config/.prettierrc.js">
/** @type {import("prettier").Config} */
</file>

<file path="tailwind-config/package.json">
{
  "name": "@repo/tailwind-config",
  "version": "1.0.0",
  "exports": {
    ".": "./tailwind.config.mts"
  },
  "license": "MIT",
  "dependencies": {
    "@repo/typescript-config": "workspace:^",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.0.7",
    "tailwindcss-animate": "^1.0.7"
  }
}
</file>

<file path="tailwind-config/postcss.config.js">

</file>

<file path="tailwind-config/README.md">
# Tailwind Config

## Table of Contents

- [Overview](#overview)
- [Installation](#installation)
- [Usage](#usage)
- [Configuration Details](#configuration-details)
- [Customization](#customization)
- [Related Documentation](#related-documentation)

## Overview

This package contains the shared Tailwind CSS configuration for the Radian Virtual Assistant project. It defines a consistent design system with customized colors, fonts, spacing, and component styles using the shadcn/ui approach.

## Installation

The package is installed as a workspace dependency:

```bash
pnpm add @repo/tailwind-config --filter <package-name>
```

## Usage

### In Next.js Applications

In your `tailwind.config.ts` file:

```typescript
import type { Config } from 'tailwindcss';
import sharedConfig from '@repo/tailwind-config';

const config: Config = {
  // Extend the shared config
  presets: [sharedConfig],
  // Add application-specific customizations
  theme: {
    extend: {
      // App-specific theme extensions
    },
  },
  // Specify content paths for this specific app
  content: [
    './app/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
    // Include shared UI components
    '../../packages/ui/src/**/*.{js,ts,jsx,tsx}',
  ],
};

export default config;
```

### In NestJS Applications

For admin UIs or embedded UIs in NestJS applications:

```typescript
import type { Config } from 'tailwindcss';
import sharedConfig from '@repo/tailwind-config';

const config: Config = {
  presets: [sharedConfig],
  content: ['./src/views/**/*.{html,ejs}', './src/public/**/*.{js,ts,jsx,tsx}'],
};

export default config;
```

## Configuration Details

The shared Tailwind configuration includes:

### Color Palette

The color system follows a semantic naming pattern with primary, secondary, accent, and neutral colors:

```typescript
colors: {
  primary: {
    DEFAULT: 'rgb(var(--color-primary) / <alpha-value>)',
    foreground: 'rgb(var(--color-primary-foreground) / <alpha-value>)',
  },
  secondary: {
    DEFAULT: 'rgb(var(--color-secondary) / <alpha-value>)',
    foreground: 'rgb(var(--color-secondary-foreground) / <alpha-value>)',
  },
  // Additional color definitions...
}
```

### Font System

The typography system defines font families, sizes, weights, and line heights:

```typescript
fontFamily: {
  sans: ['var(--font-sans)', ...fontFamily.sans],
  mono: ['var(--font-mono)', ...fontFamily.mono],
},
fontSize: {
  xs: ['0.75rem', { lineHeight: '1rem' }],
  sm: ['0.875rem', { lineHeight: '1.25rem' }],
  // Additional sizes...
},
```

### Component Extensions

Extensions for shadcn/ui components:

```typescript
extend: {
  // Component-specific styles and variants
  button: {
    variants: {
      // Button variants...
    }
  },
  // Other component variants...
}
```

## Customization

To override specific theme values in your application:

1. Extend the configuration in your app's `tailwind.config.ts`
2. Use CSS variables in your global CSS file for runtime theme changes
3. Create app-specific component variants

Example for dark mode customization:

```css
/* In your global.css */
:root {
  --color-primary: 205 100% 14%;
  --color-primary-foreground: 0 0% 98%;
  /* Other light mode variables... */
}

.dark {
  --color-primary: 205 100% 50%;
  --color-primary-foreground: 0 0% 98%;
  /* Other dark mode variables... */
}
```

## Related Documentation

- [Main Project Documentation](../../README.md)
- [UI Components](../ui/README.md)
- [Web Application](../../apps/web/README.md)
- [TypeScript Configuration](../typescript-config/README.md)
- [External: Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [External: shadcn/ui Documentation](https://ui.shadcn.com/)
</file>

<file path="tailwind-config/tailwind.config.mts">
import type { Config } from 'tailwindcss';
import animate from 'tailwindcss-animate';
⋮----
// Sidebar specific colors
</file>

<file path="tailwind-config/tsconfig.json">
{
  "extends": "@repo/typescript-config/base",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"]
}
</file>

<file path="typescript-config/.gitignore">
# Coverage directories
coverage/
.nyc_output/
</file>

<file path="typescript-config/.prettierrc.js">
/** @type {import("prettier").Config} */
</file>

<file path="typescript-config/base.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}
</file>

<file path="typescript-config/nestjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "forceConsistentCasingInFileNames": false,
    "incremental": true,
    "noFallthroughCasesInSwitch": false,
    "noImplicitAny": false,
    "removeComments": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strictNullChecks": false,
    "strictBindCallApply": false
  }
}
</file>

<file path="typescript-config/nextjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "target": "es2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="typescript-config/package.json">
{
  "name": "@repo/typescript-config",
  "version": "0.0.0",
  "private": true,
  "license": "MIT",
  "exports": {
    "./base": "./base.json",
    "./react-library": "./react-library.json",
    "./nextjs": "./nextjs.json",
    "./nestjs": "./nestjs.json"
  },
  "publishConfig": {
    "access": "public"
  }
}
</file>

<file path="typescript-config/react-library.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    "lib": ["DOM", "ESNext", "DOM.Iterable"],
    "target": "ES6",
    "jsx": "react-jsx",
    "moduleResolution": "bundler"
  },
  "exclude": ["node_modules"]
}
</file>

<file path="typescript-config/README.md">
# TypeScript Configuration

## Table of Contents

- [Overview](#overview)
- [Available Configurations](#available-configurations)
- [Usage Guidelines](#usage-guidelines)
- [Related Documentation](#related-documentation)

## Overview

These are base shared `tsconfig.json` files from which all other `tsconfig.json` files inherit from.

## Available Configurations

- `base.json` - Base configuration for all TypeScript projects
- `nextjs.json` - Configuration for Next.js applications
- `react-library.json` - Configuration for React libraries
- `nestjs.json` - Configuration for NestJS applications

## Usage Guidelines

To use these configurations in your project, extend them in your local `tsconfig.json`:

```json
{
  "extends": "@repo/typescript-config/nestjs.json",
  "compilerOptions": {
    // Project-specific overrides
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
```

## Related Documentation

- [Main Project Documentation](../../README.md)
- [ESLint Configuration](../eslint-config/README.md)
- [API Service](../../apps/api/README.md)
- [Web Application](../../apps/web/README.md)
- [File Processor Service](../../apps/file-processor-service/README.md)
- [TypeScript Official Documentation](https://www.typescriptlang.org/docs/)
</file>

<file path="repomix.config.json">
{
  "output": {
    "filePath": "repomix-output.xml",
    "style": "xml",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "compress": true,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false,
    "git": {
      "sortByChanges": true,
      "sortByChangesMaxCommits": 100
    }
  },  
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": [
      "ui",
      "prisma",
      "utils",
      "tsconfig.tsbuildinfo",
      "build",
      "api"
    ]
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}
</file>
<file path="apps/mcp-dashboard/eslint.config.mjs">
// @ts-check
import nextConfig from '@repo/eslint-config/next';

/** @type {import('eslint').Linter.FlatConfig[]} */
export default [
  ...nextConfig,
  {
    // Allow console.log in scripts
    rules: {
      'no-console': 'off',
    },
  },
];
</file>

</files>