{
  "numStartups": 1,
  "tipsHistory": {
    "ide-hotkey": 1
  },
  "projects": {
    "/home/acoose/projects/bedrock-agent-system": {
      "allowedTools": [],
      "history": [
        {
          "display": "ok, so now that we have that setup, first, I should be able to test this locally by adding this to you, claude code, via `claude mcp add ...`, second the point of the UI in apps/mcp-dashboard it to monitor this information, for memory, we may want to even have a dedicated dashboard that is similar to the dashbaord provided by mem0, showing a the graph image (the interaction of nodes), memories created, etc. Neo4j has an interface, and we should be able to do something similar, the current mcp-dashboard would not need to have this information, and the interactive memory dashbaord would be a new app that would run separately - as the goal of the mcp-dashboard is to monitor the mcp servers, etc. (and you can look through that app to see what is built) , add to your memory for this project that we should be usiung tailwwind, shadcn as the component base for ui applications, and vercel-ai sdk for quick ui ai interfaces - unless you think there would be a good reason to use chainlit and streamlit, or other such projects that allow for quick updates - but since we are talking about bespoke dashbaord, etc. using nextjs in this typescript project is probably the most sensible, if you view http://localhost:3500/settings, you can see an  interface for setting up the memory, http://localhost:3500/memories?page=1&size=10 as a memory viewer (and our dashboard, memory app can be more sophisticated, this just a small example), looking at the graph collections (similar to how neo4j viewer is able to show nodes and connections) we cna use rxjs or existing libraries to show this informaiton and iterate - first let's get the memory server running, test with adding to claude code, memories should be separated into projects, along with memories that can be for general, (but general memories can still be  organized as a project, where the logic in the tool is that general/common or whatever naming convetion should be accessible from and memory, and when starting the MCP server, the project name should be a env var or flag, etc. when starting but common/general is always available), we can provide the ability for one project to search for information in another, but all of this for now we should add to documentation and implementation plans, enhancements, etc. we need to make sure the mcp-dashboard is able to connect to the memory  and monitor, etc. this would happen from the mcp-hybrid server, but when visiting http://localhost:3000/, there are links for Dashboard, Monitoring, Servers, Logs, Workflows, Tools, and AI Assistant - need to at least have the the number or MCP servers, etc. some indication the dashboard is working with the memory - and also create the notes for future mcp-memory-dashboard, also the endpoint of /mcp for the memory server is probably not the best endpoint, as it is not descriptive and someday all of the mcp servers could exist in the same domain, so the name of the server should be in the path, /memory/mcp, or similar",
          "pastedContents": {}
        },
        {
          "display": "yes",
          "pastedContents": {}
        },
        {
          "display": "yes, I would like you recover those file, the other thing lost is the mcp servers that were added, I don't know where the information for these would have been added as I do not see any information in the .claude folder with the JSONL files with the conversation history, I do not see them in the project folder, I need a file that I can rely on in the event of a crash and make sure I don't have to add the MCP servers each time, where do you store this information and how can I make sure I don't lose this information in the future",
          "pastedContents": {}
        },
        {
          "display": "lets, for a moment, just talk about claude code (you) and the setup and files you are using ... I have a folder witha the ~/.claude/projects/-home-acoose-projects-bedrock-agent-system that might contain the conversation context we need, so when I ask what is the name of this project,  I am asking how you are storing this information locally, since i am trying to recover from a crash",
          "pastedContents": {}
        },
        {
          "display": "what folder are you using for this project? does project have a name?",
          "pastedContents": {}
        },
        {
          "display": "we were in the middle an edit, windsurf crashed, unfortunately and then I ahd to re-authorize and it looks claude code and our history also didn't survive. This is a very big problem as we were focusing on the mcp-memory-server - there are docs in the docs folder, in the implementation folder, thius is even more important as this would have solved the issue as I could have instructed you to create memories each time, before we continue, do you have memories of what we were working in this project",
          "pastedContents": {}
        },
        {
          "display": "/terminal-setup ",
          "pastedContents": {}
        }
      ],
      "dontCrawlDirectory": false,
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": true,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "workflow-state.service.ts",
        "code-analysis-nodes.ts",
        "tool.registry.ts",
        "knowledge-graph.tool.ts",
        "base.agent.ts"
      ],
      "exampleFilesGeneratedAt": 1749055091226,
      "hasCompletedProjectOnboarding": true
    },
    "/home/acoose/projects/bedrock-agent-system/apps/mcp-memory-server": {
      "allowedTools": [],
      "history": [],
      "dontCrawlDirectory": false,
      "mcpContextUris": [],
      "mcpServers": {
        "mcp-memory-server": {
          "type": "sse",
          "url": "http://localhost:3001/memory/mcp"
        }
      },
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 0,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false
    }
  },
  "firstStartTime": "2025-06-04T16:37:11.644Z",
  "userID": "8a435985a9dd808d9071e11967c3e456c59058c5167c695494c7761daa22e577",
  "oauthAccount": {
    "accountUuid": "e0661640-3cf1-482c-b9bb-2f4131f32502",
    "emailAddress": "austin.coose@gmail.com",
    "organizationUuid": "7d0d55f7-7f98-419b-86b1-4ff5246ab534",
    "organizationRole": "admin",
    "workspaceRole": null,
    "organizationName": "austin.coose@gmail.com's Organization"
  },
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "1.0.10",
  "subscriptionNoticeCount": 0,
  "hasAvailableSubscription": false,
  "cachedChangelog": "# Changelog\n\n## 1.0.10\n\n- Added markdown table support\n- Improved streaming performance\n\n## 1.0.8\n\n- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n- Increased default otel interval from 1s -> 5s\n- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n- Fixed a regression where search tools unnecessarily asked for permissions\n- Added support for triggering thinking non-English languages\n- Improved compacting UI\n\n## 1.0.7\n\n- Renamed /allowed-tools -> /permissions\n- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n- Deprecated claude config commands in favor of editing settings.json\n- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n- Improved error handling for /install-github-app\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.6\n\n- Improved edit reliability for tab-indented files\n- Respect CLAUDE_CONFIG_DIR everywhere\n- Reduced unnecessary tool permission prompts\n- Added support for symlinks in @file typeahead\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.4\n\n- Fixed a bug where MCP tool errors weren't being parsed correctly\n\n## 1.0.1\n\n- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n- Updated documentation links and OAuth process descriptions\n\n## 1.0.0\n\n- Claude Code is now generally available\n- Introducing Sonnet 4 and Opus 4 models\n\n## 0.2.125\n\n- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n\n## 0.2.117\n\n- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n- Introduced settings.cleanupPeriodDays\n- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n- Introduced --debug mode\n\n## 0.2.108\n\n- You can now send messages to Claude while it works to steer Claude in real-time\n- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n- Fixed a bug where thinking was not working in -p mode\n- Fixed a regression in /cost reporting\n- Deprecated MCP wizard interface in favor of other MCP commands\n- Lots of other bugfixes and improvements\n\n## 0.2.107\n\n- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n\n## 0.2.106\n\n- MCP SSE server configs can now specify custom headers\n- Fixed a bug where MCP permission prompt didn't always show correctly\n\n## 0.2.105\n\n- Claude can now search the web\n- Moved system & account status to /status\n- Added word movement keybindings for Vim\n- Improved latency for startup, todo tool, and file edits\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1749055089243,
  "fallbackAvailableWarningThreshold": 0.2,
  "shiftEnterKeyBindingInstalled": true,
  "mcpServers": {
    "awslabs.core-mcp-server": {
      "type": "stdio",
      "command": "uvx",
      "args": [
        "awslabs.core-mcp-server@latest",
        "FASTMCP_LOG_LEVEL=ERROR"
      ],
      "env": {}
    },
    "filesystem": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/home/acoose/projects"
      ],
      "env": {}
    },
    "puppeteer": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-puppeteer"
      ],
      "env": {}
    },
    "sequential-thinking": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "env": {}
    }
  }
}