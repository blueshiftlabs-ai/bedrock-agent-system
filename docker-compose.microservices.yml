services:
  # MCP Memory Server - Sophisticated memory with DynamoDB + OpenSearch + S3
  mcp-memory-server:
    build:
      context: ./apps/mcp-memory-server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./apps/mcp-memory-server/.env:/app/.env:ro
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Storage Server - S3 and file operations
  mcp-storage-server:
    build:
      context: ./apps/mcp-storage-server
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./apps/mcp-storage-server/.env:/app/.env:ro
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Bedrock Server - AI model interactions and knowledge base retrieval
  mcp-bedrock-server:
    build:
      context: ./apps/mcp-bedrock-server
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./apps/mcp-bedrock-server/.env:/app/.env:ro
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main MCP Hybrid Server - Orchestrates other MCP services
  mcp-hybrid-server:
    build:
      context: ./apps/mcp-hybrid-server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # MCP Service URLs
      - MCP_MEMORY_SERVER_URL=http://mcp-memory-server:3001
      - MCP_STORAGE_SERVER_URL=http://mcp-storage-server:3002
      - MCP_BEDROCK_SERVER_URL=http://mcp-bedrock-server:3003
    volumes:
      - ./apps/mcp-hybrid-server/.env:/app/.env:ro
    networks:
      - mcp-network
    depends_on:
      - mcp-memory-server
      - mcp-storage-server
      - mcp-bedrock-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard (optional for development/monitoring)
  mcp-dashboard:
    build:
      context: ./apps/mcp-dashboard
      dockerfile: Dockerfile
    ports:
      - "3100:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://mcp-hybrid-server:3000
    networks:
      - mcp-network
    depends_on:
      - mcp-hybrid-server
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge
    name: mcp-network