version: '3.8'

services:
  # MCP Memory Server
  mcp-memory-server:
    build:
      context: ./apps/mcp-memory-server
      dockerfile: Dockerfile
    image: mcp-memory-server:latest
    container_name: mcp-memory-server
    environment:
      - NODE_ENV=production
      - MEMORY_MODE=server
      - PORT=4100
      # Storage configuration
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - OPENSEARCH_ENDPOINT=http://opensearch:9200
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      # AWS configuration for local development
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=local
      - AWS_SECRET_ACCESS_KEY=local
      # Disable Bedrock in local mode
      - BEDROCK_ENABLED=false
    ports:
      - "4100:4100"
    depends_on:
      - opensearch
      - neo4j
      - dynamodb-local
    networks:
      - memory-network
    volumes:
      - ./apps/mcp-memory-server/.env.local:/app/.env.local:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4100/memory/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # OpenSearch for vector similarity search
  opensearch:
    image: opensearchproject/opensearch:3.0.0
    container_name: mcp-memory-opensearch
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - bootstrap.memory_lock=true
      - DISABLE_SECURITY_PLUGIN=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "5102:9200"
      - "5112:9600"
    networks:
      - memory-network
    volumes:
      - opensearch-data:/usr/share/opensearch/data

  # Neo4j for graph operations
  neo4j:
    image: neo4j:5.15.0
    container_name: mcp-memory-neo4j
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    ports:
      - "5103:7474"  # HTTP
      - "5104:7687"  # Bolt
    networks:
      - memory-network
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs

  # DynamoDB Local for metadata storage
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: mcp-memory-dynamodb
    ports:
      - "5100:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data -port 8000"
    volumes:
      - dynamodb-data:/home/dynamodblocal/data
    networks:
      - memory-network

  # Optional: DynamoDB Admin UI
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    container_name: mcp-memory-dynamodb-admin
    environment:
      - DYNAMO_ENDPOINT=http://dynamodb-local:8000
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=local
      - AWS_SECRET_ACCESS_KEY=local
    ports:
      - "5101:8001"
    depends_on:
      - dynamodb-local
    networks:
      - memory-network

  # Log aggregator (for streaming logs to dashboard)
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: mcp-memory-fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - fluentd-logs:/fluentd/log
    ports:
      - "5124:24224"
      - "5124:24224/udp"
    networks:
      - memory-network
    depends_on:
      - opensearch

networks:
  memory-network:
    driver: bridge

volumes:
  dynamodb-data:
  opensearch-data:
  neo4j-data:
  neo4j-logs:
  fluentd-logs: