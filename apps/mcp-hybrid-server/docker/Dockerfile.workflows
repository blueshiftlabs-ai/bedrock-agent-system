# Multi-stage build for Workflows service
FROM node:20-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Install dependencies
RUN npm ci --include=dev

# Copy source code - only what's needed for workflows
COPY src/workflows/ ./src/workflows/
COPY src/agents/ ./src/agents/
COPY src/config/ ./src/config/
COPY src/common/ ./src/common/
COPY src/health/ ./src/health/
COPY src/aws/ ./src/aws/
COPY src/integrations/ ./src/integrations/
COPY src/memory/ ./src/memory/
COPY src/types/ ./src/types/

# Create a workflows-specific main file
COPY docker/workflows/main-workflows.ts ./src/main-workflows.ts
COPY docker/workflows/app-workflows.module.ts ./src/app-workflows.module.ts

# Build the application
RUN npm run build

# Production stage
FROM node:20-slim AS production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    python3 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=appuser:appuser /app/dist ./dist

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/tmp /app/workflows-state && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3003

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=90s --retries=3 \
  CMD curl -f http://localhost:3003/health || exit 1

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3003
ENV SERVICE_TYPE=workflows
ENV NODE_OPTIONS="--max-old-space-size=6144"

# Start the application
CMD ["node", "dist/main-workflows.js"]