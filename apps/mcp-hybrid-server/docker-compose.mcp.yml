version: '3.8'

services:
  # Hybrid MCP Server - Server Mode
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: mcp-hybrid-server
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Server Configuration
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      HOST: 0.0.0.0
      
      # MCP Configuration
      MCP_SERVER_ENABLED: true
      MCP_CLIENT_ENABLED: false
      MCP_SERVER_NAME: hybrid-mcp-server
      MCP_SERVER_VERSION: 1.0.0
      MCP_SERVER_ENDPOINT: /mcp
      MCP_SERVER_TRANSPORT_TYPE: http+sse
      MCP_SERVER_ENABLE_CORS: true
      MCP_SERVER_MAX_CONNECTIONS: 100
      
      # Tool Configuration
      MCP_MAX_TOOL_EXECUTION_TIME: 300000
      MCP_ENABLE_TOOL_CHAINING: false
      MCP_TOOLS_ENABLE_CACHING: true
      
      # AWS Configuration (optional)
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MCP_ENABLE_LOGGING: true
      MCP_ENABLE_METRICS: true
    volumes:
      - ./logs:/app/logs:rw
      - ./.mcp:/app/.mcp:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-server.rule=Host(`mcp-server.localhost`)"
      - "traefik.http.services.mcp-server.loadbalancer.server.port=3000"

  # Hybrid MCP Server - Client Mode
  mcp-client:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: mcp-hybrid-client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-3001}:3000"
    environment:
      # Server Configuration
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      HOST: 0.0.0.0
      
      # MCP Configuration
      MCP_SERVER_ENABLED: false
      MCP_CLIENT_ENABLED: true
      MCP_CLIENT_AUTO_CONNECT: true
      MCP_CLIENT_CONFIG_PATH: .mcp/servers.json
      MCP_CLIENT_CONNECTION_RETRIES: 3
      MCP_CLIENT_HEALTH_CHECK_INTERVAL: 60000
      
      # Discovery Configuration
      MCP_CLIENT_DISCOVERY_ENABLED: false
      MCP_CLIENT_DISCOVERY_SCAN_INTERVAL: 300000
      
      # AWS Configuration (optional)
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MCP_ENABLE_LOGGING: true
      MCP_ENABLE_METRICS: true
    volumes:
      - ./logs:/app/logs:rw
      - ./.mcp:/app/.mcp:rw
      - ./data:/app/data:rw  # For filesystem MCP server access
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - client
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-client.rule=Host(`mcp-client.localhost`)"
      - "traefik.http.services.mcp-client.loadbalancer.server.port=3000"

  # Hybrid MCP Server - Full Hybrid Mode
  mcp-hybrid:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: mcp-hybrid-full
    restart: unless-stopped
    ports:
      - "${HYBRID_PORT:-3002}:3000"
    environment:
      # Server Configuration
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      HOST: 0.0.0.0
      
      # MCP Configuration - Both enabled
      MCP_SERVER_ENABLED: true
      MCP_CLIENT_ENABLED: true
      MCP_SERVER_NAME: hybrid-mcp-server-full
      MCP_SERVER_ENDPOINT: /mcp
      MCP_CLIENT_AUTO_CONNECT: true
      MCP_CLIENT_CONFIG_PATH: .mcp/servers.json
      
      # Server Settings
      MCP_SERVER_TRANSPORT_TYPE: http+sse
      MCP_SERVER_ENABLE_CORS: true
      MCP_SERVER_MAX_CONNECTIONS: 100
      
      # Client Settings
      MCP_CLIENT_CONNECTION_RETRIES: 3
      MCP_CLIENT_HEALTH_CHECK_INTERVAL: 60000
      
      # Tool Configuration
      MCP_MAX_TOOL_EXECUTION_TIME: 300000
      MCP_ENABLE_TOOL_CHAINING: true
      MCP_TOOLS_ENABLE_CACHING: true
      
      # AWS Configuration (optional)
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MCP_ENABLE_LOGGING: true
      MCP_ENABLE_METRICS: true
    volumes:
      - ./logs:/app/logs:rw
      - ./.mcp:/app/.mcp:rw
      - ./data:/app/data:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - hybrid
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-hybrid.rule=Host(`mcp-hybrid.localhost`)"
      - "traefik.http.services.mcp-hybrid.loadbalancer.server.port=3000"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    profiles:
      - cache
      - hybrid
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcp_hybrid}
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d:ro
    profiles:
      - database
      - hybrid
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user} -d ${POSTGRES_DB:-mcp_hybrid}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    depends_on:
      - mcp-server

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3003}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: mcp-hybrid-network
    driver: bridge